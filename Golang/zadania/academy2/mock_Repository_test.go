// Code generated by mockery v2.23.1. DO NOT EDIT.

package academy

import mock "github.com/stretchr/testify/mock"

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: name
func (_m *MockRepository) Get(name string) (Student, error) {
	ret := _m.Called(name)

	var r0 Student
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Student, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) Student); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Student)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
func (_e *MockRepository_Expecter) Get(name interface{}) *MockRepository_Get_Call {
	return &MockRepository_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *MockRepository_Get_Call) Run(run func(name string)) *MockRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_Get_Call) Return(_a0 Student, _a1 error) *MockRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Get_Call) RunAndReturn(run func(string) (Student, error)) *MockRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Graduate provides a mock function with given fields: name
func (_m *MockRepository) Graduate(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Graduate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Graduate'
type MockRepository_Graduate_Call struct {
	*mock.Call
}

// Graduate is a helper method to define mock.On call
//   - name string
func (_e *MockRepository_Expecter) Graduate(name interface{}) *MockRepository_Graduate_Call {
	return &MockRepository_Graduate_Call{Call: _e.mock.On("Graduate", name)}
}

func (_c *MockRepository_Graduate_Call) Run(run func(name string)) *MockRepository_Graduate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_Graduate_Call) Return(_a0 error) *MockRepository_Graduate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Graduate_Call) RunAndReturn(run func(string) error) *MockRepository_Graduate_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: year
func (_m *MockRepository) List(year uint8) ([]string, error) {
	ret := _m.Called(year)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint8) ([]string, error)); ok {
		return rf(year)
	}
	if rf, ok := ret.Get(0).(func(uint8) []string); ok {
		r0 = rf(year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(uint8) error); ok {
		r1 = rf(year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - year uint8
func (_e *MockRepository_Expecter) List(year interface{}) *MockRepository_List_Call {
	return &MockRepository_List_Call{Call: _e.mock.On("List", year)}
}

func (_c *MockRepository_List_Call) Run(run func(year uint8)) *MockRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint8))
	})
	return _c
}

func (_c *MockRepository_List_Call) Return(names []string, err error) *MockRepository_List_Call {
	_c.Call.Return(names, err)
	return _c
}

func (_c *MockRepository_List_Call) RunAndReturn(run func(uint8) ([]string, error)) *MockRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: name, year
func (_m *MockRepository) Save(name string, year uint8) error {
	ret := _m.Called(name, year)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint8) error); ok {
		r0 = rf(name, year)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - name string
//   - year uint8
func (_e *MockRepository_Expecter) Save(name interface{}, year interface{}) *MockRepository_Save_Call {
	return &MockRepository_Save_Call{Call: _e.mock.On("Save", name, year)}
}

func (_c *MockRepository_Save_Call) Run(run func(name string, year uint8)) *MockRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint8))
	})
	return _c
}

func (_c *MockRepository_Save_Call) Return(_a0 error) *MockRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Save_Call) RunAndReturn(run func(string, uint8) error) *MockRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
