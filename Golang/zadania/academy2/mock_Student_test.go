// Code generated by mockery v2.23.1. DO NOT EDIT.

package academy

import mock "github.com/stretchr/testify/mock"

// MockStudent is an autogenerated mock type for the Student type
type MockStudent struct {
	mock.Mock
}

type MockStudent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStudent) EXPECT() *MockStudent_Expecter {
	return &MockStudent_Expecter{mock: &_m.Mock}
}

// FinalGrade provides a mock function with given fields:
func (_m *MockStudent) FinalGrade() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockStudent_FinalGrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinalGrade'
type MockStudent_FinalGrade_Call struct {
	*mock.Call
}

// FinalGrade is a helper method to define mock.On call
func (_e *MockStudent_Expecter) FinalGrade() *MockStudent_FinalGrade_Call {
	return &MockStudent_FinalGrade_Call{Call: _e.mock.On("FinalGrade")}
}

func (_c *MockStudent_FinalGrade_Call) Run(run func()) *MockStudent_FinalGrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStudent_FinalGrade_Call) Return(_a0 int) *MockStudent_FinalGrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStudent_FinalGrade_Call) RunAndReturn(run func() int) *MockStudent_FinalGrade_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockStudent) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockStudent_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockStudent_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockStudent_Expecter) Name() *MockStudent_Name_Call {
	return &MockStudent_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockStudent_Name_Call) Run(run func()) *MockStudent_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStudent_Name_Call) Return(_a0 string) *MockStudent_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStudent_Name_Call) RunAndReturn(run func() string) *MockStudent_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Year provides a mock function with given fields:
func (_m *MockStudent) Year() uint8 {
	ret := _m.Called()

	var r0 uint8
	if rf, ok := ret.Get(0).(func() uint8); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint8)
	}

	return r0
}

// MockStudent_Year_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Year'
type MockStudent_Year_Call struct {
	*mock.Call
}

// Year is a helper method to define mock.On call
func (_e *MockStudent_Expecter) Year() *MockStudent_Year_Call {
	return &MockStudent_Year_Call{Call: _e.mock.On("Year")}
}

func (_c *MockStudent_Year_Call) Run(run func()) *MockStudent_Year_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStudent_Year_Call) Return(_a0 uint8) *MockStudent_Year_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStudent_Year_Call) RunAndReturn(run func() uint8) *MockStudent_Year_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockStudent interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStudent creates a new instance of MockStudent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStudent(t mockConstructorTestingTNewMockStudent) *MockStudent {
	mock := &MockStudent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
